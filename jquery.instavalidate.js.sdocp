sdocp('jquery.instavalidate.js.sdoc', 'Text field instavalidate | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nThis plugin gives you really easy validation for text fields. For example:\n\n| $(\'input.zip\').instavalidate(/\\d{5}(\\d{4})?/);\n  $(\'input.name\').instavalidate(function (value) {return name.charAt(0) === name.charAt(0).toUpperCase()});\n\nYou can also configure asynchronous validation:\n\n| $(\'input.name\').instavalidate(function (value, callback) {\n    $.getJSON(\'/names\', function (names) {\n      callback(names.indexOf(value) > -1);\n    });\n  });\n\nThere aren\'t conflicts if you do it the asynchronous way; that is, if AJAX call 2 returns before AJAX call 1, AJAX call 1\'s callback won\'t overwrite AJAX call 2\'s validation. (Basically, this\nworks the way you\'d want it to.)\n\nConfiguration.\nThere are a few options you can set:\n\n| 1. className: The CSS class to use to mark a field as invalid. Defaults to \'invalid\'.\n  2. invalid: A function to be called when the field transitions from valid to invalid. Defaults to null.\n  3. valid: A function to be called when the field transitions from invalid to valid. Defaults to null.\n  4. delay: How many milliseconds to wait after the last keystroke before validating. Defaults to 0.\n  5. immediate: Whether to update on each keystroke. If false, the validation status will be updated only on blur. Defaults to true.\n\n(function ($) {\n  var defaults = {className: \'invalid\', invalid: null, valid: null, delay: 0};\n  \n  $.fn.instavalidate = function (validator, options) {\n    var validate_function = validator.constructor === RegExp ? function (value) {return validator.test(value)} : validator;\n    options = $.extend({}, defaults, options || {});\n\n    return this.each(function () {\n      var timeout = null, presently_valid = true, asynchronous_counter = 0;\n      var validator = function () {\n        var t = $(this);\n\n        timeout && clearTimeout(timeout);\n        timeout = setTimeout(function () {\n          timeout = null;\n\n          var asynchronous_id = ++asynchronous_counter;\n          var callback        = function (valid) {\n            if (asynchronous_id === asynchronous_counter && presently_valid !== (presently_valid = valid))\n              if (presently_valid) {\n                t.removeClass(options.className);\n                options.valid && options.valid.call(t);\n              } else {\n                t.addClass(options.className);\n                options.invalid && options.invalid.call(t);\n              }\n          };\n\n          var result = validate_function.call(t, t.val(), callback);\n          result === undefined || callback(result);\n        }, options.delay);\n      };\n\n      $(this).blur(validator);\n      options.immediate && $(this).keyup(validator);\n    });\n  };\n})(jQuery);\n');